package org.lks.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.lks.factory.DAOFactory;
import org.lks.service.IDepartmentService;
import org.lks.utils.DatabaseConnection;
import org.lks.vo.Department;

public class DepartmentServiceImpl implements IDepartmentService{
	private DatabaseConnection databaseConnection = new DatabaseConnection();
	
	@Override
	public boolean insert(Department vo) throws Exception {
		try{
			if(DAOFactory.getIDepartmentDAOInstance(this.databaseConnection.getConnection()).findById(vo.getDid()) == null){
				return DAOFactory.getIDepartmentDAOInstance(this.databaseConnection.getConnection()).doCreate(vo);
			}
			return false;
		}catch(Exception e){
			throw e;
		}finally{
			this.databaseConnection.close();
		}
	}

	@Override
	public boolean update(Department vo) throws Exception {
		try{
			return DAOFactory.getIDepartmentDAOInstance(this.databaseConnection.getConnection()).doUpdate(vo);
		}catch(Exception e){
			throw e;
		}finally{
			this.databaseConnection.close();
		}
	}

	@Override
	public boolean delete(Set<Long> ids) throws Exception {
		try{
			this.databaseConnection.getConnection().setAutoCommit(false);
			DAOFactory.getIEmployeeDAOInstance(this.databaseConnection.getConnection()).doRemoveBatchByDepartmentId(ids);
			DAOFactory.getIDepartmentDAOInstance(this.databaseConnection.getConnection()).doRemoveBatch(ids);
			this.databaseConnection.getConnection().commit();
			return true;
		}catch(Exception e){
			this.databaseConnection.getConnection().rollback();
			throw e;
		}finally{
			this.databaseConnection.close();
		}
	}

	@Override
	public Department updatePre(long id) throws Exception {
		try{
			return DAOFactory.getIDepartmentDAOInstance(this.databaseConnection.getConnection()).findById(id);
		}catch(Exception e){
			throw e;
		}finally{
			this.databaseConnection.close();
		}
	}

	@Override
	public List<Department> list() throws Exception {
		try{
			return DAOFactory.getIDepartmentDAOInstance(this.databaseConnection.getConnection()).findAll();
		}catch(Exception e){
			throw e;
		}finally{
			this.databaseConnection.close();
		}
	}

	@Override
	public Map<String, Object> list(int currentPage, int lineSize, String column, String keyWord) throws Exception {
		try{
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("all", DAOFactory.getIDepartmentDAOInstance(this.databaseConnection.getConnection()).findAllSplit(currentPage, lineSize, column, keyWord));
			map.put("allRecorders", DAOFactory.getIDepartmentDAOInstance(this.databaseConnection.getConnection()).getAllCount(column, keyWord));
			return map;
		}catch(Exception e){
			throw e;
		}finally{
			this.databaseConnection.close();
		}
	}

	@Override
	public List<Department> listDetails() throws Exception {
		try{
			return DAOFactory.getIDepartmentDAOInstance(this.databaseConnection.getConnection()).findAllStatus();
		}catch(Exception e){
			throw e;
		}finally{
			this.databaseConnection.close();
		}
	}

	@Override
	public Department show(Long id, int currentPage, int lineSize, String column, String keyWord) throws Exception {
		try{
			Department department = DAOFactory.getIDepartmentDAOInstance(this.databaseConnection.getConnection()).findByIdDetails(id);
			department.setEmployees(DAOFactory.getIEmployeeDAOInstance(this.databaseConnection.getConnection()).findAllByDepartmentId(id, currentPage, lineSize, column, keyWord));;
			return department;
		}catch(Exception e){
			throw e;
		}finally{
			this.databaseConnection.close();
		}
	}

}
