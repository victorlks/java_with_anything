package org.lks.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

import org.lks.dao.IDepartmentDAO;
import org.lks.dao.util.AbstractBaseDAO;
import org.lks.vo.Department;

public class DepartmentDAOImpl extends AbstractBaseDAO implements IDepartmentDAO{
	private PreparedStatement pstmt = null;
	
	public DepartmentDAOImpl(Connection conn) {
		super(conn);
	}

	@Override
	public boolean doCreate(Department vo) throws Exception {
		String sql = "INSERT INTO department(did,dname,dlocation) VALUES(?,?,?)";
		this.pstmt = this.conn.prepareStatement(sql);
		this.pstmt.setLong(1, vo.getDid());
		this.pstmt.setString(2, vo.getDname());
		this.pstmt.setString(3, vo.getDlocation());
		return this.pstmt.executeUpdate() > 0;
	}

	@Override
	public boolean doUpdate(Department vo) throws Exception {
		String sql = "UPDATE department SET dname=?,dlocation=? WHERE did=?";
		this.pstmt = this.conn.prepareStatement(sql);
		this.pstmt.setString(1, vo.getDname());
		this.pstmt.setString(2, vo.getDlocation());
		this.pstmt.setLong(3, vo.getDid());
		return this.pstmt.executeUpdate() > 0;
	}

	@Override
	public boolean doRemoveBatch(Set<Long> ids) throws Exception {
		return this.removeHandle(ids, "department", "did");
	}

	@Override
	public Department findById(Long id) throws Exception {
		Department vo = null;
		String sql = "SELECT did,dname,dlocation FROM department WHERE did=?";
		this.pstmt = this.conn.prepareStatement(sql);
		this.pstmt.setLong(1, id);
		ResultSet rs = this.pstmt.executeQuery();
		if(rs.next()){
			vo = new Department();
			vo.setDid(rs.getLong(1));
			vo.setDname(rs.getString(2));
			vo.setDlocation(rs.getString(3));
		}
		return vo;
	}

	@Override
	public List<Department> findAll() throws Exception {
		List<Department> all = new ArrayList<Department>();
		Department vo = null;
		String sql = "SELECT did,dname,dlocation FROM department";
		this.pstmt = this.conn.prepareStatement(sql);
		ResultSet rs = this.pstmt.executeQuery();
		while(rs.next()){
			vo = new Department();
			vo.setDid(rs.getLong(1));
			vo.setDname(rs.getString(2));
			vo.setDlocation(rs.getString(3));
			all.add(vo);
		}
		return all;
	}

	@Override
	public List<Department> findAllSplit(Integer currentPage, Integer lineSize, String column, String keyWord)
			throws Exception {
		String sql = "SELECT did,dname,dlocation FROM department WHERE " + column + " LIKE ? LIMIT ?,?";
		List<Department> all = new ArrayList<Department>();
		Department vo = null;
		this.pstmt = this.conn.prepareStatement(sql);
		this.pstmt.setString(1, "%" + keyWord + "%");
		this.pstmt.setInt(2, (currentPage-1) * lineSize);
		this.pstmt.setInt(3, lineSize);
		ResultSet rs = this.pstmt.executeQuery();
		while(rs.next()){
			vo = new Department();
			vo.setDid(rs.getLong(1));
			vo.setDname(rs.getString(2));
			vo.setDlocation(rs.getString(3));
			all.add(vo);
		}
		return all;
	}

	@Override
	public Long getAllCount(String column, String keyWord) throws Exception {
		return this.getAllCountHandle(column, keyWord, "department");
	}

	@Override
	public List<Department> findAllStatus() throws Exception {
		String sql = "SELECT d.did,d.dname,d.dlocation,COUNT(*) number,AVG(e.esalary) avg,MAX(e.esalary) max,MIN(e.esalary) min,SUM(e.esalary) sum  "
				+ "FROM department d,employee e WHERE e.edepartmentid=d.did GROUP BY d.did";
		List<Department> all = new ArrayList<Department>();
		Department vo = null;
		this.pstmt = this.conn.prepareStatement(sql);
		ResultSet rs = this.pstmt.executeQuery();
		while(rs.next()){
			vo = new Department();
			vo.setDid(rs.getLong(1));
			vo.setDname(rs.getString(2));
			vo.setDlocation(rs.getString(3));
			if(vo.getStatus() == null){
				vo.setStatus(new HashMap<String,Object>());
			}
			vo.getStatus().put("totalPerson", rs.getLong(4));
			vo.getStatus().put("averageSalary", rs.getDouble(5));
			vo.getStatus().put("maxSalary", rs.getDouble(6));
			vo.getStatus().put("minSalary", rs.getDouble(7));
			vo.getStatus().put("totalSalary", rs.getDouble(8));
			all.add(vo);
		}
		return all;
	}

	@Override
	public Department findByIdDetails(Long id) throws Exception {
		String sql = "SELECT d.did,d.dname,d.dlocation,COUNT(*) number,AVG(e.esalary) avg,MAX(e.esalary) max,MIN(e.esalary) min,SUM(e.esalary) sum  "
				+ "FROM department d,employee e WHERE e.edepartmentid=d.did AND d.did=?";
		Department vo = null;
		this.pstmt = this.conn.prepareStatement(sql);
		this.pstmt.setLong(1, id);
		ResultSet rs = this.pstmt.executeQuery();
		if(rs.next()){
			vo = new Department();
			vo.setDid(rs.getLong(1));
			vo.setDname(rs.getString(2));
			vo.setDlocation(rs.getString(3));
			if(vo.getStatus() == null){
				vo.setStatus(new HashMap<String,Object>());
			}
			vo.getStatus().put("totalPerson", rs.getLong(4));
			vo.getStatus().put("averageSalary", rs.getDouble(5));
			vo.getStatus().put("maxSalary", rs.getDouble(6));
			vo.getStatus().put("minSalary", rs.getDouble(7));
			vo.getStatus().put("totalSalary", rs.getDouble(8));
		}
		return vo;
	}

	
}
